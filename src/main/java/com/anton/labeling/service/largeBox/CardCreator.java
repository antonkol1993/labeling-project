package com.anton.labeling.service.largeBox;


import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;

import java.io.FileOutputStream;
import java.io.IOException;


public class CardCreator {

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    public void createCard(XSSFWorkbook workbook, XSSFSheet sheet) throws IOException {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        sheet.setColumnWidth(1, (int) (((124 - 5) / 7.0 + 0.71) * 256));
        sheet.setColumnWidth(2, (int) (((88 - 5) / 7.0 + 0.71) * 256));
        sheet.setColumnWidth(3, (int) (((88 - 5) / 7.0 + 0.71) * 256));

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for (int i = 1; i <= 10; i++) {
            if (sheet.getRow(i) == null) {
                sheet.createRow(i);
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        sheet.getRow(1).setHeightInPoints(73.5f);
        sheet.getRow(2).setHeightInPoints(69.0f);
        sheet.getRow(3).setHeightInPoints(35.25f);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        addMergedRegions(sheet);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å —è—á–µ–µ–∫
        for (int row = 1; row <= 10; row++) {  // –°—Ç—Ä–æ–∫–∏ –æ—Ç 1 –¥–æ 10
            Row sheetRow = sheet.getRow(row);
            for (int col = 1; col <= 3; col++) {
                Cell cell = sheetRow.createCell(col);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
                CellStyle cellStyle = CardStyle.createBorderedCellStyle(workbook, sheet, row, col);
                cell.setCellStyle(cellStyle);
            }
        }

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
        fillCells(workbook, sheet); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è

        // –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        ImageHandler.addImageToSheet(workbook, sheet, "src/main/resources/static/images/Mfix.jpg",
                1, 1, 2, 3, 420000, 150000);
        ImageHandler.addImageToSheet(workbook, sheet, "src/main/resources/static/images/Screw.jpg",
                2, 1, 3, 3, 400000, 130000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try (FileOutputStream fileOut = new FileOutputStream("ExcelCard.xlsx")) {
            workbook.write(fileOut);
        }
        workbook.close();
        System.out.println("Excel —Å–æ–∑–¥–∞–Ω–∞: ExcelCard.xlsx");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    private void addMergedRegions(XSSFSheet sheet) {
        // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        int[][] mergedRegions = {
                {1, 1, 1, 3}, // B2:D2
                {2, 2, 1, 3}, // B3:D3
                {3, 3, 1, 3}, // B4:D4
                {4, 4, 2, 3}, // C5:D5
                {5, 5, 2, 3}, // C6:D6
                {9, 9, 2, 3}  // C9:D9
        };

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for (int[] region : mergedRegions) {
            CellRangeAddress newRegion = new CellRangeAddress(region[0], region[1], region[2], region[3]);
            boolean regionExists = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
            for (int i = 0; i < sheet.getNumMergedRegions(); i++) {
                CellRangeAddress existingRegion = sheet.getMergedRegion(i);
                if (newRegion.equals(existingRegion)) {
                    regionExists = true;
                    break;
                }
            }

            // –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (!regionExists) {
                sheet.addMergedRegion(newRegion);
            }
        }
    }

    private static void fillCells(XSSFWorkbook workbook, XSSFSheet sheet) {
        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 3 (B3)
        Font boldFontMain3Row = workbook.createFont();
        boldFontMain3Row.setBold(true);
        boldFontMain3Row.setFontHeightInPoints((short) 11);

        // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ B3 (–∂–∏—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä)
        Row row3 = sheet.getRow(3);
        if (row3 == null) row3 = sheet.createRow(3);
        Cell cell3 = row3.getCell(1);
        if (cell3 == null) cell3 = row3.createCell(1);
        cell3.setCellValue("–ñ–∏—Ä–Ω—ã–π –¶–µ–Ω—Ç—Ä Item");

        CellStyle boldCenterStyle = CardStyle.createBorderedCellStyle(workbook, sheet, 3, 1);
        boldCenterStyle.setAlignment(HorizontalAlignment.CENTER);
        boldCenterStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        boldCenterStyle.setFont(boldFontMain3Row);
        cell3.setCellStyle(boldCenterStyle);

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ª–µ–≤–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è (B4-B10, –∫—Ä–æ–º–µ B9)
        Font boldFontDownRows = workbook.createFont();
        boldFontDownRows.setBold(true);
        boldFontDownRows.setFontHeightInPoints((short) 10);

        for (int rowNum = 4; rowNum <= 10; rowNum++) {
            if (rowNum == 9) continue;

            Row row = sheet.getRow(rowNum);
            if (row == null) row = sheet.createRow(rowNum);

            Cell cellB = row.getCell(1);
            if (cellB == null) cellB = row.createCell(1);
            cellB.setCellValue("–ñ–∏—Ä–Ω—ã–π –ª–µ–≤–æ Item");

            CellStyle boldLeftStyle = CardStyle.createBorderedCellStyle(workbook, sheet, rowNum, 1);
            boldLeftStyle.setAlignment(HorizontalAlignment.LEFT);
            boldLeftStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            boldLeftStyle.setFont(boldFontDownRows);
            cellB.setCellStyle(boldLeftStyle);
        }

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ C5:D5 –∏ C7
        Font boldFontCenter = workbook.createFont();
        boldFontCenter.setBold(true);
        boldFontCenter.setFontHeightInPoints((short) 10);

        CellStyle boldCenterMergedStyle = CardStyle.createBorderedCellStyle(workbook, sheet, 5, 2);
        boldCenterMergedStyle.setAlignment(HorizontalAlignment.CENTER);
        boldCenterMergedStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        boldCenterMergedStyle.setFont(boldFontCenter);

        // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ C5:D5 (—è—á–µ–π–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã)
        Row row5 = sheet.getRow(5);
        if (row5 == null) row5 = sheet.createRow(5);
        Cell cell5C = row5.getCell(2);
        if (cell5C == null) cell5C = row5.createCell(2);
        cell5C.setCellValue("–ñ–∏—Ä–Ω—ã–π –¶–µ–Ω—Ç—Ä Item");
        cell5C.setCellStyle(boldCenterMergedStyle);

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –ª–∏ C5:D5 –ø–µ—Ä–µ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        if (!isMergedRegion(sheet, 5, 2, 5, 3)) {
            sheet.addMergedRegion(new CellRangeAddress(5, 5, 2, 3));
        }

        // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ C7 (—Ü–µ–Ω—Ç—Ä)
        Row row7 = sheet.getRow(7);
        if (row7 == null) row7 = sheet.createRow(7);
        Cell cell7C = row7.getCell(2);
        if (cell7C == null) cell7C = row7.createCell(2);
        cell7C.setCellValue("1 000");
        cell7C.setCellStyle(boldCenterMergedStyle);

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ "final left"
        Font boldFontFinalLeft = workbook.createFont();
        boldFontFinalLeft.setBold(true);
        boldFontFinalLeft.setFontHeightInPoints((short) 10);

        CellStyle boldLeftFinalStyle = workbook.createCellStyle();
        boldLeftFinalStyle.setAlignment(HorizontalAlignment.LEFT);
        boldLeftFinalStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        boldLeftFinalStyle.setFont(boldFontFinalLeft);

        // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ D6-D8 (—Ç–µ–∫—Å—Ç —Å–ª–µ–≤–∞, –∂–∏—Ä–Ω—ã–π)
        for (int rowNum = 6; rowNum <= 8; rowNum++) {
            Row row = sheet.getRow(rowNum);
            if (row == null) row = sheet.createRow(rowNum);

            Cell cellD = row.getCell(3);
            if (cellD == null) cellD = row.createCell(3);
            cellD.setCellValue("final left");

            CellStyle borderedLeftStyle = CardStyle.createBorderedCellStyle(workbook, sheet, rowNum, 3);
            borderedLeftStyle.setAlignment(HorizontalAlignment.LEFT);
            borderedLeftStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            borderedLeftStyle.setFont(boldFontFinalLeft);
            cellD.setCellStyle(borderedLeftStyle);
        }

        // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ C9-C10 (—Ç–µ–∫—Å—Ç —Å–ª–µ–≤–∞, –∂–∏—Ä–Ω—ã–π)
        for (int rowNum = 9; rowNum <= 10; rowNum++) {
            Row row = sheet.getRow(rowNum);
            if (row == null) row = sheet.createRow(rowNum);

            Cell cellC = row.getCell(2);
            if (cellC == null) cellC = row.createCell(2);
            cellC.setCellValue("final left");

            CellStyle borderedLeftStyle = CardStyle.createBorderedCellStyle(workbook, sheet, rowNum, 2);
            borderedLeftStyle.setAlignment(HorizontalAlignment.LEFT);
            borderedLeftStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            borderedLeftStyle.setFont(boldFontFinalLeft);
            cellC.setCellStyle(borderedLeftStyle);
        }

    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
     */
    private static boolean isMergedRegion(XSSFSheet sheet, int firstRow, int firstCol, int lastRow, int lastCol) {
        for (int i = 0; i < sheet.getNumMergedRegions(); i++) {
            CellRangeAddress range = sheet.getMergedRegion(i);
            if (range.getFirstRow() == firstRow && range.getFirstColumn() == firstCol &&
                    range.getLastRow() == lastRow && range.getLastColumn() == lastCol) {
                return true;
            }
        }
        return false;
    }


}