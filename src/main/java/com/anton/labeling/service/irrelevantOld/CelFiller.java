package com.anton.labeling.service.irrelevantOld;

import com.anton.labeling.objects.ItemLargeBox;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;

public class CelFiller {

    private final XSSFWorkbook workbook;
    private final XSSFSheet sheet;

    public CelFiller(XSSFWorkbook workbook, XSSFSheet sheet) {
        this.workbook = workbook;
        this.sheet = sheet;
    }

    public void fillCells(XSSFWorkbook workbook, XSSFSheet sheet, ItemLargeBox item) {

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        Font arialFontMain = createArialFont((short) 11);



// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ B3 (–∂–∏—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä)
        String nameAndSize = item.getName() + "\n" + item.getSize();
        setCellValueWithStyle(3, 1, nameAndSize, arialFontMain, HorizontalAlignment.CENTER);
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è—á–µ–π–∫–∞ –∏–º–µ–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
        Row row3 = sheet.getRow(3);
        if (row3 == null) row3 = sheet.createRow(3);
        Cell cell3 = row3.getCell(1);
        if (cell3 == null) cell3 = row3.createCell(1);
        CellStyle style = cell3.getCellStyle();
        style.setWrapText(true);  // –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
        cell3.setCellStyle(style);
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        sheet.autoSizeColumn(1);  // –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ B
// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–º–µ—Å—Ç–∏–ª–∏—Å—å
        row3.setHeightInPoints(50);  // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è B4-B10 (–∫—Ä–æ–º–µ B9) —Å –ª–µ–≤—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
        Font arialFontDownRows = createArialFont((short) 10);
        for (int rowNum = 4; rowNum <= 10; rowNum++) {
            if (rowNum == 9) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É 9
            if (rowNum == 4) {
                setCellValueWithStyle(rowNum, 1, "Marking", arialFontDownRows, HorizontalAlignment.LEFT);
                setCellValueWithStyle(rowNum, 2, item.getMarking(), arialFontDownRows, HorizontalAlignment.CENTER);
            }
            if (rowNum == 5) {
                setCellValueWithStyle(rowNum, 1, "–†–ê–ó–ú–ï–†/Size", arialFontDownRows, HorizontalAlignment.LEFT);
            }
            if (rowNum == 7) {
                setCellValueWithStyle(rowNum, 1, "–ö–æ–ª-–≤–æ –≤ —É–ø–∞–∫/—à—Ç.", arialFontDownRows, HorizontalAlignment.LEFT);
            }
            if (rowNum == 8) {
                setCellValueWithStyle(rowNum, 1, "–í–µ—Å —É–ø–∞–∫ –ö–≥/Kgs", arialFontDownRows, HorizontalAlignment.LEFT);
            }
            if (rowNum == 10) {
                setCellValueWithStyle(rowNum, 1, "ORDER:", arialFontDownRows, HorizontalAlignment.LEFT);
            }

        }

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è C5:D5, C7 (—Ü–µ–Ω—Ç—Ä) + item
        Font arialFontCenter = createArialFont((short) 10);
        setCellValueWithMergedStyle(5, 2, item.getSize(), arialFontCenter, HorizontalAlignment.CENTER, 5, 3);
        setCellValueWithStyle(7, 2, item.getQuantityInBox(), arialFontCenter, HorizontalAlignment.CENTER);

        // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ D7-D8, C9-C10 (—Ç–µ–∫—Å—Ç —Å–ª–µ–≤–∞, –∂–∏—Ä–Ω—ã–π)
        Font arialFontFinalLeft = createArialFont((short) 10);
        for (int rowNum = 7; rowNum <= 10; rowNum++) {
            if (rowNum == 7) {
                setCellValueWithStyle(rowNum, 3, "–®—Ç / PCS", arialFontFinalLeft, HorizontalAlignment.LEFT);
            }
            if (rowNum == 8) {
                setCellValueWithStyle(rowNum, 3, "–ö–≥/Kgs", arialFontFinalLeft, HorizontalAlignment.LEFT);
            }

            if (rowNum == 9) {
                setCellValueWithStyle(rowNum, 2, "–°–¥–µ–ª–∞–Ω–æ –≤ –ö–ù–†", arialFontFinalLeft, HorizontalAlignment.LEFT);
            }
            if (rowNum == 10) {
                setCellValueWithStyle(rowNum, 2, item.getOrder(), arialFontFinalLeft, HorizontalAlignment.LEFT);
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ Arial
    private Font createArialFont(short fontSize) {
        Font font = workbook.createFont();
        font.setFontName("Arial");
        font.setBold(true);
        font.setFontHeightInPoints(fontSize);
        return font;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç–∏–ª—å —è—á–µ–π–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
    private void setCellValueWithStyle(int rowNum, int colNum, String value, Font font, HorizontalAlignment alignment) {
        Row row = sheet.getRow(rowNum);
        if (row == null) row = sheet.createRow(rowNum);

        Cell cell = row.getCell(colNum);
        if (cell == null) cell = row.createCell(colNum);

        cell.setCellValue(value);

        CellStyle style = CardStyle.createBorderedCellStyle(workbook, sheet, rowNum, colNum);
        style.setFont(font);
        style.setAlignment(alignment);
        style.setVerticalAlignment(VerticalAlignment.CENTER);

        cell.setCellStyle(style);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —è—á–µ–π–∫—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —è—á–µ–µ–∫ –∏ –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    private void setCellValueWithMergedStyle(int endRow, int startCol, String value, Font font, HorizontalAlignment alignment,
                                             int startRow, int endCol) {
        setCellValueWithStyle(endRow, startCol, value, font, alignment);

        if (!isMergedRegion(startRow, startCol, endRow, endCol)) {
            sheet.addMergedRegion(new CellRangeAddress(startRow, endRow, startCol, endCol));
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    private boolean isMergedRegion(int firstRow, int firstCol, int lastRow, int lastCol) {
        for (int i = 0; i < sheet.getNumMergedRegions(); i++) {
            CellRangeAddress range = sheet.getMergedRegion(i);
            if (range.getFirstRow() == firstRow && range.getFirstColumn() == firstCol &&
                    range.getLastRow() == lastRow && range.getLastColumn() == lastCol) {
                return true;
            }
        }
        return false;
    }
}