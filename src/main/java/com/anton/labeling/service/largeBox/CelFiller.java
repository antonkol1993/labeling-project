package com.anton.labeling.service.largeBox;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;

public class CelFiller {

    private final XSSFWorkbook workbook;
    private final XSSFSheet sheet;

    public CelFiller(XSSFWorkbook workbook, XSSFSheet sheet) {
        this.workbook = workbook;
        this.sheet = sheet;
    }

    public void fillCells(XSSFWorkbook workbook, XSSFSheet sheet) {
        CelFiller cellFiller = new CelFiller(workbook, sheet);

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        Font arialFontMain = cellFiller.createArialFont((short) 11);

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ B3 (–∂–∏—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä)
        cellFiller.setCellValueWithStyle(3, 1, "–ñ–∏—Ä–Ω—ã–π –¶–µ–Ω—Ç—Ä Item", arialFontMain, HorizontalAlignment.CENTER);

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è B4-B10 (–∫—Ä–æ–º–µ B9) —Å –ª–µ–≤—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
        Font arialFontDownRows = cellFiller.createArialFont((short) 10);
        for (int rowNum = 4; rowNum <= 10; rowNum++) {
            if (rowNum == 9) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É 9
            cellFiller.setCellValueWithStyle(rowNum, 1, "–ñ–∏—Ä–Ω—ã–π –ª–µ–≤–æ Item", arialFontDownRows, HorizontalAlignment.LEFT);
        }

        // üîπ –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è C5:D5, C7 (—Ü–µ–Ω—Ç—Ä)
        Font arialFontCenter = cellFiller.createArialFont((short) 10);
        cellFiller.setCellValueWithMergedStyle(5, 2, "–ñ–∏—Ä–Ω—ã–π –¶–µ–Ω—Ç—Ä Item", arialFontCenter, HorizontalAlignment.CENTER, 5, 3);
        cellFiller.setCellValueWithStyle(7, 2, "–ñ–∏—Ä–Ω—ã–π –¶–µ–Ω—Ç—Ä Item", arialFontCenter, HorizontalAlignment.CENTER);

        // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ D6-D8, C9-C10 (—Ç–µ–∫—Å—Ç —Å–ª–µ–≤–∞, –∂–∏—Ä–Ω—ã–π)
        Font arialFontFinalLeft = cellFiller.createArialFont((short) 10);
        for (int rowNum = 6; rowNum <= 8; rowNum++) {
            cellFiller.setCellValueWithStyle(rowNum, 3, "final left", arialFontFinalLeft, HorizontalAlignment.LEFT);
        }
        for (int rowNum = 9; rowNum <= 10; rowNum++) {
            cellFiller.setCellValueWithStyle(rowNum, 2, "final left", arialFontFinalLeft, HorizontalAlignment.LEFT);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ Arial
    private Font createArialFont(short fontSize) {
        Font font = workbook.createFont();
        font.setFontName("Arial");
        font.setBold(true);
        font.setFontHeightInPoints(fontSize);
        return font;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç–∏–ª—å —è—á–µ–π–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
    private void setCellValueWithStyle(int rowNum, int colNum, String value, Font font, HorizontalAlignment alignment) {
        Row row = sheet.getRow(rowNum);
        if (row == null) row = sheet.createRow(rowNum);

        Cell cell = row.getCell(colNum);
        if (cell == null) cell = row.createCell(colNum);

        cell.setCellValue(value);

        CellStyle style = CardStyle.createBorderedCellStyle(workbook, sheet, rowNum, colNum);
        style.setFont(font);
        style.setAlignment(alignment);
        style.setVerticalAlignment(VerticalAlignment.CENTER);

        cell.setCellStyle(style);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —è—á–µ–π–∫—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —è—á–µ–µ–∫ –∏ –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    private void setCellValueWithMergedStyle(int rowNum, int colNum, String value, Font font, HorizontalAlignment alignment, int mergeStartRow, int mergeEndCol) {
        setCellValueWithStyle(rowNum, colNum, value, font, alignment);

        if (!isMergedRegion(mergeStartRow, colNum, rowNum, mergeEndCol)) {
            sheet.addMergedRegion(new CellRangeAddress(mergeStartRow, rowNum, colNum, mergeEndCol));
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    private boolean isMergedRegion(int firstRow, int firstCol, int lastRow, int lastCol) {
        for (int i = 0; i < sheet.getNumMergedRegions(); i++) {
            CellRangeAddress range = sheet.getMergedRegion(i);
            if (range.getFirstRow() == firstRow && range.getFirstColumn() == firstCol &&
                    range.getLastRow() == lastRow && range.getLastColumn() == lastCol) {
                return true;
            }
        }
        return false;
    }
}